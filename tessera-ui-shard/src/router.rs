use std::sync::OnceLock;

use parking_lot::RwLock;

static ROUTER: OnceLock<RwLock<Router>> = OnceLock::new();

pub struct Router {
    /// Current route stack
    route_stack: Vec<Box<dyn RouterDestination>>,
}

impl Router {
    fn new() -> Self {
        Self {
            route_stack: Vec::new(),
        }
    }

    /// Use a mutable reference to the router
    pub fn with_mut<F, R>(f: F) -> R
    where
        F: FnOnce(&mut Self) -> R,
    {
        let router = ROUTER.get_or_init(|| RwLock::new(Self::new()));
        let mut router = router.write();
        f(&mut router)
    }

    /// Push a new route destination onto the stack
    pub fn push<T: RouterDestination + 'static>(&mut self, destination: T) {
        self.route_stack.push(Box::new(destination));
    }

    /// Pop the top route destination from the stack
    ///
    /// Returns None if the stack is empty
    pub fn pop(&mut self) -> Option<Box<dyn RouterDestination>> {
        self.route_stack.pop()
    }

    /// Whether the router is empty
    pub fn is_empty(&self) -> bool {
        self.route_stack.is_empty()
    }

    /// Get the current top route destination, used for route component display
    pub fn last(&self) -> Option<&Box<dyn RouterDestination>> {
        self.route_stack.last()
    }
}

/// Route controller, used for routing in components
///
/// Should be automatically injected into parameters by the `#[shard]` macro when needed
#[derive(Default)]
pub struct RouteController;

impl RouteController {
    /// Create a new route controller
    pub fn new() -> Self {
        Self
    }

    /// Push a new route destination to the current router
    pub fn push<T: RouterDestination + 'static>(&self, destination: T) {
        Router::with_mut(|router| {
            router.push(destination);
        });
    }

    /// Pop the top destination from the current router
    pub fn pop(&self) -> Option<Box<dyn RouterDestination>> {
        Router::with_mut(|router| router.pop())
    }
}

/// This is a trait describing a route destination
/// Should not be implemented directly, but generated by the #[shard] macro
pub trait RouterDestination: Send + Sync {
    /// Executes the component associated with this route destination
    fn exec_component(&self);
}
